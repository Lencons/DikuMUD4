stages:
  - Build
  - Test
  - Package
  - Release
  - Deploy

variables:
  # Docker Image values
  DOCKER_IMAGE_NAME: "dikumud3"
  DOCKER_BUILD_IMAGE: "$CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME"


Compile:
  stage: Build
  tags:
      - Linux
  script:
    - apt-get update
    - apt-get install -y gcc g++ make cmake
    - apt-get install -y bison flex libboost-all-dev libssl-dev rapidjson-dev
    - apt-get install -y doxygen graphviz dia mscgen
    - cmake .
    - make all -j4

    # Copy documentation to pages (clean out any existing documentation first)
    - rm -rf public
    - mkdir public
    - mv -f docs public/dikumud3

  artifacts:
    paths:
      - public
      - vme/bin/vme
      - vme/bin/mplex
      - vme/zone/*.data
      - vme/zone/*.reset

#unit-test-job:   # This job runs in the test stage.
#  stage: Test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 60 seconds."
#    - sleep 60
#    - echo "Code coverage is 90%"

#lint-test-job:   # This job also runs in the test stage.
#  stage: Test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - sleep 10
#    - echo "No lint issues found."


##
## Package Jobs
##


DikuMUD:
  stage: Package
  tags:
    - Docker

  before_script:
    # docker wants the password to be passed via stdin for security
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  
  script:
    # fetch the lastest image to speed up build
    - docker pull $DOCKER_BUILD_IMAGE:latest || true

    # build the container and push it into the registry
    - >
      docker build
      --pull
      --cache-from $DOCKER_BUILD_IMAGE:latest
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $DOCKER_BUILD_IMAGE:$CI_COMMIT_SHA
      .
    - docker push $DOCKER_BUILD_IMAGE:$CI_COMMIT_SHA


##
## Release Jobs
##


# For commits to the default branch, create a new "latest" tagged image
DikuMUD-latest:
  stage: Release
  tags:
    - Docker
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    # we do not need GitLab to clone the source code.
    GIT_STRATEGY: none

  before_script:
    # docker wants the password to be passed via stdin for security
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  
  script:
    - docker pull $DOCKER_BUILD_IMAGE:$CI_COMMIT_SHA
    - docker tag $DOCKER_BUILD_IMAGE:$CI_COMMIT_SHA $DOCKER_BUILD_IMAGE:latest
    - docker push $DOCKER_BUILD_IMAGE:latest


# For commits that have an assigned tag, create a matching tagged image
DikuMUD-tag:
  stage: Release
  tags:
    - Docker
  only:
    - tags
  variables:
    # we do not need GitLab to clone the source code.
    GIT_STRATEGY: none

  before_script:
    # docker wants the password to be passed via stdin for security
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  
  script:
    - docker pull $DOCKER_BUILD_IMAGE:$CI_COMMIT_SHA
    - docker tag $DOCKER_BUILD_IMAGE:$CI_COMMIT_SHA $DOCKER_BUILD_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $DOCKER_BUILD_IMAGE:$CI_COMMIT_REF_NAME
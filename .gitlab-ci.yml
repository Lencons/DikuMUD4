stages:
  - Build
  - Test
  - Package
  - Release
  - Deploy

variables:
  # Docker Image values
  DOCKER_IMAGE_NAME: "dikumud"
  DOCKER_BUILD_IMAGE: "$CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME"


##
## STAGE: Build Jobs
##


# Compile System
#
# Build the whole system and store what we need as artifacts for future
# jobs.
#
# Note:
#   This has been tagged to the Debian runner as is has 16 vCPU's and we
#   can easilly run this with 12 threads.
Compile:
  stage: Build
  tags:
    - Debian
  script:
    - cmake .
    - make all -j12

  artifacts:
    paths:
      - docs/*
      - vme/bin/vme
      - vme/bin/mplex
      - vme/zone/*.data
      - vme/zone/*.reset

#unit-test-job:   # This job runs in the test stage.
#  stage: Test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 60 seconds."
#    - sleep 60
#    - echo "Code coverage is 90%"

#lint-test-job:   # This job also runs in the test stage.
#  stage: Test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - sleep 10
#    - echo "No lint issues found."


##
## STAGE: Package Jobs
##


DikuMUD:
  stage: Package
  tags:
    - Docker

  before_script:
    # docker wants the password to be passed via stdin for security
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  
  script:
    # fetch the lastest image to speed up build
    - docker pull $DOCKER_BUILD_IMAGE:latest || true

    # build the container and push it into the registry
    - >
      docker build
      --pull
      --cache-from $DOCKER_BUILD_IMAGE:latest
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $DOCKER_BUILD_IMAGE:$CI_COMMIT_SHA
      .
    - docker push $DOCKER_BUILD_IMAGE:$CI_COMMIT_SHA


pages:
  stage: Package
  script:
    # TODO: We need to actually build the documentation here ideally.
    #
    # Copy documentation to pages (clean out any existing documentation first)
    - rm -rf public
    - mv -f docs public
  artifacts:
    paths:
    - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH


##
## STAGE: Release Jobs
##


#
# Image Release Template.
#
# Job template to apply meaningful tags to images within the container
# registry. Takes the current pipelines commit SHA image and then pushes
# a new image with the digest tag provided in $RELEASE_TAG.
#
# The following variables need to be set for this template to operate:
#
#   DOCKER_IMAGE_NAME     The name of the image to be released.
#   RELEASE_TAG           The digets tag to apply to the released image.
#
#
.release_image:
  stage: Release
  tags:
    - Docker
  variables:
    # we do not need GitLab to clone the source code.
    GIT_STRATEGY: none
  before_script:
    # docker wants the password to be passed via stdin for security
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker pull $DOCKER_BUILD_IMAGE:$CI_COMMIT_SHA
    - docker tag $DOCKER_BUILD_IMAGE:$CI_COMMIT_SHA $DOCKER_BUILD_IMAGE:$RELEASE_TAG
    - docker push $DOCKER_BUILD_IMAGE:$RELEASE_TAG


# Release: Latest Image
#
# Any commits to the default branch in the project will be released as the
# "latest" image.
DikuMUD-latest:
  extends: .release_image
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    RELEASE_TAG: "latest"


# Release: Release Tag
#
# When Releases are created, the commit will be given the Tag associated with
# the release in $CI_COMMIT_REF_NAME. We will create a image in the container
# registry with the Release Tag as the images digest tag.
DikuMUD-tag:
  extends: .release_image
  only:
    - tags
  variables:
    RELEASE_TAG: $CI_COMMIT_REF_NAME
